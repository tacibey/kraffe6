---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import CardSmall from "@components/ui/cards/CardSmall.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";
import type { CollectionEntry } from 'astro:content';

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique products
export async function getStaticPaths() {
  const productEntries = await getCollection("products", ({ id }) =>
    id.startsWith("en/")
  );
  return productEntries.map((product) => {
    const idWithoutLang = product.id.replace(/^en\//, "");
    return {
      params: { id: idWithoutLang },
      props: { product },
    };
  });
}

interface Props {
  product: CollectionEntry<'products'>;
}

const { product } = Astro.props;

const allEnglishProducts = (await getCollection("products", ({ id }) => id.startsWith("en/")))
  .sort((a, b) => a.data.main.id - b.data.main.id);

const currentIndex = allEnglishProducts.findIndex(p => p.id === product.id);
const prevProduct = currentIndex > 0 ? allEnglishProducts[currentIndex - 1] : null;
const nextProduct = currentIndex < allEnglishProducts.length - 1 ? allEnglishProducts[currentIndex + 1] : null;

const pageTitle: string = `${product.data.title} | ${SITE.title}`;
const contactButtonTitle = "Request Info";
const relatedProductsTitle = "Check Out Our Other Machines";

// === YENİ: SABİT MANUEL İNDİRME LİNK METNİ (BLUEPRINTS İÇİN) ===
const blueprintManualLinkText_EN = "Download Manual & Catalogs";
// === /YENİ ===
---

<MainLayout title={pageTitle}>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto grid max-w-[85rem] grid-cols-1 items-center gap-8 px-4 py-10 sm:px-6 md:grid-cols-2 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div class="md:col-span-1">
      <div>
        <p
          id="fadeText"
          class="mb-8 max-w-prose text-pretty font-light text-neutral-700 dark:text-neutral-300 sm:text-xl"
        >
          {product.data.main.content}
        </p>
      </div>
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {product.data.title}
        </h1>
        <p class="mt-2 text-lg text-neutral-600 dark:text-neutral-400">
          {product.data.description}
        </p>
      </div>
    </div>
    <div class="md:col-span-1">
      <Image
        id="fadeInMoveRight"
        src={product.data.main.imgMain}
        class="w-full h-auto rounded-lg"
        alt={product.data.main.imgAlt}
        format={"avif"}
        loading={"eager"}
      />
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab, index) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
              >
                {product.data.longDescription.title}
              </h2>
              <p
                class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400"
                set:html={product.data.longDescription.subTitle}
              >
              </p>
              <p class="mt-5">
                <PrimaryCTA
                  title={contactButtonTitle}
                  url={product.data.longDescription.btnURL}
                />
              </p>
            </div>
            <div class="space-y-6 lg:space-y-10">
              {
                product.data.descriptionList.map((list) => (
                  <div class="flex">
                    <div>
                      <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                        {list.title}
                      </h3>
                      <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                        {list.subTitle}
                      </p>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2">
            <div class="max-w-md space-y-6">
              {
                product.data.specificationsLeft.map((spec) => (
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                      {spec.title}
                    </h3>
                    <p class="text-neutral-600 dark:text-neutral-400">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
            </div>
            <div class="mt-6 max-w-md space-y-6 md:ml-auto md:mt-0">
              {
                product.data.specificationsRight ? (
                  product.data.specificationsRight?.map((spec) => (
                    <div>
                      <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                        {spec.title}
                      </h3>
                      <p class="text-neutral-600 dark:text-neutral-400">
                        {spec.subTitle}
                      </p>
                    </div>
                  ))
                ) : product.data.tableData ? (
                  <div class="flex flex-col">
                    <div class="-m-1.5 overflow-x-auto">
                      <div class="inline-block min-w-full p-1.5 align-middle">
                        <div class="overflow-hidden">
                          <table class="min-w-full divide-y divide-neutral-300 dark:divide-neutral-700">
                            <thead>
                              <tr>
                                {product.data.tableData?.[0].feature?.map(
                                  (header) => (
                                    <th
                                      scope="col"
                                      class="px-6 py-3 text-start text-xs font-medium uppercase text-neutral-500 dark:text-neutral-500"
                                    >
                                      {header}
                                    </th>
                                  )
                                )}
                              </tr>
                            </thead>
                            <tbody class="divide-y divide-neutral-300 dark:divide-neutral-700">
                              {product.data.tableData?.map((row) =>
                                row.description.map((rowData) => (
                                  <tr key={rowData.join('-')}>
                                    {rowData.map((cellValue, index) => (
                                      <td key={index} class="whitespace-nowrap px-6 py-4 text-sm font-medium text-neutral-600 dark:text-neutral-400">
                                        {cellValue}
                                      </td>
                                    ))}
                                  </tr>
                                ))
                              )}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null
              }
            </div>
          </div>
        </div>
      </div>

      {/* === BLUEPRINTS SEKMESİ GÜNCELLENDİ === */}
      <div id="tabs-with-card-3" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-center"> {/* items-center eklendi */}
            {/* Sol Taraf: Birinci Blueprint Görseli */}
            {product.data.blueprints?.first ? (
              <div class="overflow-hidden rounded-xl shadow-lg">
                <Image
                  src={product.data.blueprints.first}
                  class="h-full w-full object-cover object-center"
                  alt={product.data.blueprints.secondLinkAlt || "Blueprint Illustration 1"} {/* Markdown'dan alt metin veya varsayılan */}
                  format={"avif"}
                  loading={"lazy"}
                />
              </div>
            ) : (
              <div class="flex items-center justify-center h-full min-h-[200px] bg-neutral-100 dark:bg-neutral-700/30 rounded-xl">
                <p class="text-neutral-500 dark:text-neutral-400">No primary blueprint available.</p>
              </div>
            )}

            {/* Sağ Taraf: İkinci Blueprint Görseli (Tıklanabilir Linke Dönüşecek) veya Sadece Link */}
            {product.data.blueprints?.secondLink ? (
              <a
                href={product.data.blueprints.secondLink}
                target="_blank"
                rel="noopener noreferrer"
                class="block overflow-hidden rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500"
                aria-label={product.data.blueprints.secondLinkAlt || blueprintManualLinkText_EN}
              >
                {product.data.blueprints.second ? (
                  // Markdown'da ikinci görsel tanımlıysa onu kullan
                  <Image
                    src={product.data.blueprints.second}
                    alt={product.data.blueprints.secondLinkAlt || blueprintManualLinkText_EN}
                    class="h-full w-full object-cover object-center"
                    format={"avif"}
                    loading={"lazy"}
                  />
                ) : (
                  // İkinci görsel yoksa, metin linki göster
                  <div class="flex flex-col items-center justify-center h-full min-h-[200px] bg-neutral-100 dark:bg-neutral-700/30 rounded-xl p-6 text-center">
                    <p class="text-lg font-semibold text-orange-500 dark:text-orange-400 mb-2">
                      {product.data.blueprints.secondLinkAlt || blueprintManualLinkText_EN}
                    </p>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-10 h-10 text-orange-500 dark:text-orange-400">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
                    </svg>
                    <p class="mt-2 text-sm text-neutral-600 dark:text-neutral-400">Click to download</p>
                  </div>
                )}
              </a>
            ) : product.data.blueprints?.second ? (
              // Sadece ikinci blueprint görseli var, link yok (tıklanamaz)
              <div class="overflow-hidden rounded-xl shadow-lg">
                <Image
                  src={product.data.blueprints.second}
                  alt={product.data.blueprints.secondLinkAlt || "Blueprint Illustration 2"}
                  class="h-full w-full object-cover object-center"
                  format={"avif"}
                  loading={"lazy"}
                />
              </div>
            ) : (
              // Ne ilk blueprint ne de ikinci bölüm için içerik yoksa (ve ilk blueprint de yoksa)
              !product.data.blueprints?.first && (
                <div class="md:col-span-2 text-center py-10">
                    <p class="text-neutral-500 dark:text-neutral-400">No blueprints or manuals available.</p>
                </div>
              )
            )}
          </div>
        </div>
      </div>
      {/* === /BLUEPRINTS SEKMESİ GÜNCELLENDİ === */}
    </div>
  </div>

  {/* Product Gallery, Related Products, Lightbox HTML (önceki gibi) */}
  {(product.data.photos && product.data.photos.length > 0) && (
    <section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
      <h2 class="text-2xl font-bold text-neutral-800 dark:text-neutral-200 text-center mb-8">{productGalleryTitle}</h2>
      <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
        {galleryImages.map((image, index) => (
          <button
            type="button"
            class="block overflow-hidden rounded-xl shadow-md hover:shadow-xl transition-shadow duration-300 focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 aspect-square"
            onclick={`openLightbox(${index})`}
            aria-label={`View image ${index + 1}: ${image.alt}`}
          >
            <Image
              src={image.thumbnailSrc}
              alt={`Thumbnail for ${image.alt}`}
              class="w-full h-full object-cover object-center"
              format={"avif"}
              loading={"lazy"}
              width={300}
              height={300}
            />
          </button>
        ))}
      </div>
    </section>
  )}

  {(prevProduct || nextProduct) && (
    <section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
      <h2 class="text-2xl font-bold text-neutral-800 dark:text-neutral-200 text-center mb-8">{relatedProductsTitle}</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 justify-center">
        {prevProduct && (
          <div class="flex justify-center sm:justify-end">
            <CardSmall product={prevProduct} productLocale="en" />
          </div>
        )}
        {!prevProduct && nextProduct && <div class="hidden sm:block"></div>}
        {nextProduct && (
          <div class="flex justify-center sm:justify-start">
            <CardSmall product={nextProduct} productLocale="en" />
          </div>
        )}
      </div>
    </section>
  )}

  <div id="lightbox-overlay" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center z-[100] p-4" onclick="closeLightbox()">
    <div class="relative max-w-4xl max-h-[90vh]" onclick="event.stopPropagation()">
      <button type="button" class="absolute -top-2 -right-2 sm:top-2 sm:right-2 z-50 p-2 bg-neutral-700 hover:bg-neutral-600 rounded-full text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white" onclick="closeLightbox()" aria-label="Close lightbox">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
      </button>
      <img id="lightbox-image" src="" alt="" class="block max-w-full max-h-[85vh] object-contain rounded-lg shadow-xl">
      <button type="button" class="absolute top-1/2 left-2 sm:left-4 transform -translate-y-1/2 p-2 bg-neutral-700 hover:bg-neutral-600 rounded-full text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white opacity-75 hover:opacity-100" onclick="changeImage(-1)" aria-label="Previous image">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
      </button>
      <button type="button" class="absolute top-1/2 right-2 sm:right-4 transform -translate-y-1/2 p-2 bg-neutral-700 hover:bg-neutral-600 rounded-full text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white opacity-75 hover:opacity-100" onclick="changeImage(1)" aria-label="Next image">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
      </button>
    </div>
  </div>
</MainLayout>

{/* Scriptler */}
<script is:inline>
  import { gsap } from "gsap";
  function setElementAnimationDefaults(id, settings) { gsap.set(id, settings); }
  setElementAnimationDefaults("#fadeText", { autoAlpha: 0, y: 50, willChange: "transform, opacity" });
  setElementAnimationDefaults("#fadeInUp", { autoAlpha: 0, y: 50, willChange: "transform, opacity" });
  setElementAnimationDefaults("#fadeInMoveRight", { autoAlpha: 0, x: 300, willChange: "transform, opacity" });
  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });
  timeline.to("#fadeText", { duration: 1.5, autoAlpha: 1, y: 0, delay: 1, ease: "power2.out" });
  timeline.to("#fadeInUp", { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" }, "-=1.2");
  timeline.to("#fadeInMoveRight", { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" }, "-=1.4");
  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
</script>
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn, activeButton) {
      if (btn !== activeButton) {
        btn.classList.remove("active", "bg-neutral-100", "hover:border-transparent", "dark:bg-white/[.05]");
        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) contentElement.classList.add("hidden");
        }
        changeHeadingStyle(btn, ["text-neutral-800", "dark:text-neutral-200"], ["text-orange-400", "dark:text-orange-300"]);
      }
    }
    function activateButton(button) {
      button.classList.add("active", "bg-neutral-100", ",hover:border-transparent", "dark:bg-white/[.05]");
      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) contentElementToShow.classList.remove("hidden");
      }
      changeHeadingStyle(button, ["text-orange-400", "dark:text-orange-300"], ["text-neutral-800", "dark:text-neutral-200"]);
    }
    function changeHeadingStyle(button, addClasses, removeClasses) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }
    const tabButtons = document.querySelectorAll("[data-target]");
    if (tabButtons.length > 0) {
      activateButton(tabButtons[0]);
      tabButtons.forEach((btn, index) => {
         if (index !== 0) changeHeadingStyle(btn, ["text-neutral-800", "dark:text-neutral-200"], ["text-orange-400", "dark:text-orange-300"]);
      });
    }
    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
<script define:vars={{ galleryImages }}>
  let currentImageIndex = 0;
  const productImages = Array.isArray(galleryImages) ? galleryImages : [];

  const lightboxOverlay = document.getElementById('lightbox-overlay');
  const lightboxImage = document.getElementById('lightbox-image');
  const prevButton = lightboxOverlay?.querySelector('button[aria-label="Previous image"]');
  const nextButton = lightboxOverlay?.querySelector('button[aria-label="Next image"]');

  function openLightbox(index) {
    if (!productImages || productImages.length === 0) return;
    currentImageIndex = index;
    if (lightboxImage && lightboxOverlay) {
      lightboxImage.src = productImages[currentImageIndex].src;
      lightboxImage.alt = productImages[currentImageIndex].alt;
      lightboxOverlay.classList.remove('hidden');
      lightboxOverlay.classList.add('flex');
      document.body.style.overflow = 'hidden';
      updateNavButtons();
    }
  }

  function closeLightbox() {
    if (lightboxOverlay) {
      lightboxOverlay.classList.add('hidden');
      lightboxOverlay.classList.remove('flex');
      document.body.style.overflow = '';
    }
  }

  function changeImage(step) {
    if (!productImages || productImages.length === 0) return;
    currentImageIndex += step;
    if (currentImageIndex < 0) {
      currentImageIndex = productImages.length - 1;
    } else if (currentImageIndex >= productImages.length) {
      currentImageIndex = 0;
    }
    if (lightboxImage) {
      lightboxImage.src = productImages[currentImageIndex].src;
      lightboxImage.alt = productImages[currentImageIndex].alt;
      updateNavButtons();
    }
  }

  function updateNavButtons() {
    if (!prevButton || !nextButton || !productImages || productImages.length <= 1) {
        if(prevButton) prevButton.style.display = 'none';
        if(nextButton) nextButton.style.display = 'none';
        return;
    }
    if (prevButton) prevButton.style.display = 'block';
    if (nextButton) nextButton.style.display = 'block';
  }

  document.addEventListener('keydown', function (e) {
    if (lightboxOverlay && !lightboxOverlay.classList.contains('hidden')) {
      if (e.key === 'Escape') closeLightbox();
      else if (e.key === 'ArrowLeft') changeImage(-1);
      else if (e.key === 'ArrowRight') changeImage(1);
    }
  });

  window.openLightbox = openLightbox;
  window.closeLightbox = closeLightbox;
  window.changeImage = changeImage;
</script>
