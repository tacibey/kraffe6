---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import CardSmall from "@components/ui/cards/CardSmall.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";
import type { CollectionEntry } from 'astro:content';

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique FR products
export async function getStaticPaths() {
  const productEntries = await getCollection("products", ({ id }) =>
    id.startsWith("fr/") // Sadece Fransızca ürünleri al
  );
  return productEntries.map((product) => {
    const idWithoutLang = product.id.replace(/^fr\//, "");
    return {
      params: { lang: 'fr', id: idWithoutLang }, // lang parametresi eklendi
      props: { product },
    };
  });
}

interface Props {
  product: CollectionEntry<'products'>;
}

const { product } = Astro.props;

// === YENİ: Önceki/Sonraki Ürün Logic (Fransızca) ===
const allFrenchProducts = (await getCollection("products", ({ id }) => id.startsWith("fr/")))
  .sort((a, b) => a.data.main.id - b.data.main.id);

const currentIndex = allFrenchProducts.findIndex(p => p.id === product.id);

const prevProduct = currentIndex > 0 ? allFrenchProducts[currentIndex - 1] : null;
const nextProduct = currentIndex < allFrenchProducts.length - 1 ? allFrenchProducts[currentIndex + 1] : null;
// === /YENİ ===

const pageTitle: string = `${product.data.title} | ${SITE.title}`; // Ürün başlığı Markdown'dan Fransızca gelecek
// === FRANSIZCA METİNLER ===
const contactButtonTitle = "Demander des informations";
const relatedProductsTitle = "Découvrez nos autres machines";
// === /FRANSIZCA METİNLER ===
---

<MainLayout title={pageTitle} lang="fr"> {/* lang="fr" eklendi */}
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto grid max-w-[85rem] grid-cols-1 items-center gap-8 px-4 py-10 sm:px-6 md:grid-cols-2 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    {/* Metin İçeriği (1 Sütun) */}
    <div class="md:col-span-1">
      <div>
        <p
          id="fadeText"
          class="mb-8 max-w-prose text-pretty font-light text-neutral-700 dark:text-neutral-300 sm:text-xl"
        >
          {product.data.main.content} {/* Markdown'dan Fransızca gelecek */}
        </p>
      </div>
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {product.data.title} {/* Markdown'dan Fransızca gelecek */}
        </h1>
        <p class="mt-2 text-lg text-neutral-600 dark:text-neutral-400">
          {product.data.description} {/* Markdown'dan Fransızca gelecek */}
        </p>
      </div>
    </div>

    {/* Resim (1 Sütun) */}
    <div class="md:col-span-1">
      <Image
        id="fadeInMoveRight"
        src={product.data.main.imgMain}
        class="w-full h-auto rounded-lg"
        alt={product.data.main.imgAlt} {/* Markdown'dan Fransızca alt metin gelmeli */}
        format={"avif"}
        loading={"eager"}
      />
    </div>
  </section>


  {/* --- SEKMELER VE DİĞER İÇERİK --- */}
  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab, index) => ( // Sekme başlıkları Markdown'dan Fransızca gelmeli
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
              >
                {product.data.longDescription.title} {/* Markdown'dan Fransızca gelecek */}
              </h2>
              <div
                class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400 prose prose-neutral dark:prose-invert prose-lg max-w-none"
                set:html={product.data.longDescription.subTitle} {/* Markdown'dan Fransızca HTML içeriği */}
              >
              </div>
              <p class="mt-5">
                <PrimaryCTA
                  title={contactButtonTitle}
                  url={product.data.longDescription.btnURL.replace(/^\/contact/, "/fr/contact")} {/* URL'yi Fransızca yap */}
                />
              </p>
            </div>

            <div class="space-y-6 lg:space-y-10">
              {
                product.data.descriptionList.map((list) => ( // İçerik Markdown'dan Fransızca gelmeli
                  <div class="flex">
                    <div>
                      <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                        {list.title}
                      </h3>
                      <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                        {list.subTitle}
                      </p>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2">
            <div class="max-w-md space-y-6">
              {
                product.data.specificationsLeft.map((spec) => ( // İçerik Markdown'dan Fransızca gelmeli
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                      {spec.title}
                    </h3>
                    {/* specificationsLeft.subTitle için set:html kullanılıyor, çünkü Markdown'dan link gelebilir */}
                    <p class="text-neutral-600 dark:text-neutral-400" set:html={spec.subTitle}></p>
                  </div>
                ))
              }
            </div>
            {
              product.data.specificationsRight ? (
                <div class="mt-6 max-w-md space-y-6 md:ml-auto md:mt-0">
                  {product.data.specificationsRight?.map((spec) => ( // İçerik Markdown'dan Fransızca gelmeli
                    <div>
                      <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                        {spec.title}
                      </h3>
                      <p class="text-neutral-600 dark:text-neutral-400">
                        {spec.subTitle}
                      </p>
                    </div>
                  ))}
                </div>
              ) : product.data.tableData ? (
                <div class="mt-6 space-y-6 md:ml-auto md:mt-0">
                  <div class="flex flex-col">
                    <div class="-m-1.5 overflow-x-auto">
                      <div class="inline-block min-w-full p-1.5 align-middle">
                        <div class="overflow-hidden">
                          <table class="min-w-full divide-y divide-neutral-300 dark:divide-neutral-700">
                            <thead>
                              <tr>
                                {product.data.tableData?.[0].feature?.map( // Başlıklar Markdown'dan Fransızca gelmeli
                                  (header) => (
                                    <th
                                      scope="col"
                                      class="px-6 py-3 text-start text-xs font-medium uppercase text-neutral-500 dark:text-neutral-500"
                                    >
                                      {header}
                                    </th>
                                  )
                                )}
                              </tr>
                            </thead>
                            <tbody class="divide-y divide-neutral-300 dark:divide-neutral-700">
                              {product.data.tableData?.map((row) => // İçerik Markdown'dan Fransızca gelmeli
                                row.description.map((rowData) => (
                                  <tr key={rowData.join('-')}>
                                    {rowData.map((cellValue, index) => (
                                      <td key={index} class="whitespace-nowrap px-6 py-4 text-sm font-medium text-neutral-600 dark:text-neutral-400">
                                        {cellValue}
                                      </td>
                                    ))}
                                  </tr>
                                ))
                              )}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null
            }
          </div>
        </div>
      </div>

      <div id="tabs-with-card-3" class="hidden" role="tabpanel">
        <div class="mx-auto mb-20 flex w-full md:mb-28 2xl:w-4/5"> {/* Bu div'i grid yapısına çevirelim */}
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-center w-full"> {/* items-center eklendi, w-full eklendi */}
            {/* Sol Taraf: Birinci Blueprint Görseli */}
            {product.data.blueprints?.first ? (
              <div class="overflow-hidden rounded-xl shadow-lg">
                <Image
                  src={product.data.blueprints.first}
                  class="h-full w-full object-cover object-center"
                  alt={ "Illustration du plan 1"} {/* Markdown'dan Fransızca alt metin gelmeli veya genel bir metin */}
                  format={"avif"}
                  loading={"lazy"}
                />
              </div>
            ) : (
                <div class="flex items-center justify-center h-64 bg-neutral-100 dark:bg-neutral-700/30 rounded-xl p-4 md:col-span-2">
                    <p class="text-neutral-500 dark:text-neutral-400">Aucun plan disponible pour ce produit.</p>
                </div>
            )}

            {/* Sağ Taraf: İkinci Blueprint Görseli (sadece ilk görsel varsa gösterilir) */}
            {product.data.blueprints?.first && product.data.blueprints?.second && (
              <div class="overflow-hidden rounded-xl shadow-lg">
                <Image
                  src={product.data.blueprints.second}
                  alt={"Illustration du plan 2"} {/* Markdown'dan Fransızca alt metin gelmeli veya genel bir metin */}
                  class="h-full w-full object-cover object-center"
                  format={"avif"}
                  loading={"lazy"}
                />
              </div>
            )}
          </div>
        </div>
        {/* Sabit İndirme Linki (Her Zaman Görünür) - Blueprints tabının en dış sarmalayıcısının içine, grid'den sonra */}
        {(product.data.blueprints?.first || product.data.blueprints?.second) && (
            <div class="mt-10 text-center px-4 sm:px-6 lg:px-8"> {/* Padding eklendi */}
              <a
                href="https://drive.google.com/drive/folders/1F9e5EnI17jGkLRrw7HO03CCXrCJqcPnb" // globalManualUrl yerine doğrudan URL
                target="_blank"
                rel="noopener noreferrer"
                class="text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-300 hover:underline font-medium text-lg inline-flex items-center gap-x-1"
              >
                Télécharger les manuels et catalogues {/* globalManualLinkText_FR yerine doğrudan metin */}
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
                </svg>
              </a>
            </div>
          )}
      </div>
    </div>
  </div>

  {/* Önceki/Sonraki Ürünler Bölümü */}
  {(prevProduct || nextProduct) && (
    <section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
      <h2 class="text-2xl font-bold text-neutral-800 dark:text-neutral-200 text-center mb-8">{relatedProductsTitle}</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 justify-center">
        {prevProduct && (
          <div class="flex justify-center sm:justify-end">
            <CardSmall product={prevProduct} productLocale="fr" /> {/* productLocale="fr" */}
          </div>
        )}
        {!prevProduct && nextProduct && <div class="hidden sm:block"></div>}
        {nextProduct && (
          <div class="flex justify-center sm:justify-start">
            <CardSmall product={nextProduct} productLocale="fr" /> {/* productLocale="fr" */}
          </div>
        )}
      </div>
    </section>
  )}
</MainLayout>

{/* Scriptler */}
<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults("#fadeText", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInMoveRight", {
    autoAlpha: 0,
    x: 300,
    willChange: "transform, opacity",
  });


  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
    "#fadeInUp",
    { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
    "-=1.2"
  );

  timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );


  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
</script>
<script>
  // Sekme yönetimi script'i
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-orange-400", "dark:text-orange-300"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-orange-400", "dark:text-orange-300"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: string[],
      removeClasses: string[]
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      activateButton(tabButtons[0]);
      tabButtons.forEach((btn, index) => {
         if (index !== 0) {
            changeHeadingStyle(
              btn,
              ["text-neutral-800", "dark:text-neutral-200"],
              ["text-orange-400", "dark:text-orange-300"]
            );
         }
      });
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
