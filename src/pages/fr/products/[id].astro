---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import FAQ from "@components/sections/misc/FAQ.astro"; // FAQ component'unu import et
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}
// This gets the static paths for all the unique products

export async function getStaticPaths() {
  const productEntries = await getCollection("products", ({ id }) =>
    id.startsWith("fr/")
  );
  return productEntries.map((product) => {
    const idWithoutLang = product.id.replace(/^fr\//, ""); // Remove the "fr/" prefix
    return {
      params: { lang: "fr", id: idWithoutLang },
      props: { product },
    };
  });
}

const { product } = Astro.props;

const pageTitle: string = `${product.data.title} | ${SITE.title}`;

// Define FAQ data specific to this product page (Using English text as provided, translate if needed)
const productFaqs = {
  subTitle: `Si vous ne trouvez pas les informations que vous cherchez sur le ${product.data.title}, n'hésitez pas à nous contacter pour une assistance supplémentaire. Nous sommes toujours heureux d'aider !`,
  faqs: [
    {
      question: "Quels types de machines à torréfier proposez-vous ?",
      answer: "Nous proposons des machines à torréfier de type tambour avec une source de chaleur à brûleur prémélangé." // Example translation
    },
    {
      question: "Pouvez-vous personnaliser une machine à torréfier pour répondre à mes besoins spécifiques ?",
      answer: "Oui, nous proposons des solutions personnalisées pour répondre aux besoins uniques de nos clients. Notre équipe travaillera avec vous pour concevoir une machine qui répond à vos exigences de production et à votre budget." // Example translation
    },
    {
      question: "Quelle est la capacité de vos machines à torréfier et quelles tailles sont disponibles ?",
      answer: "Nos machines à torréfier ont une capacité allant de 0,5 kilogramme à 240 kilogrammes. Nous proposons une variété de tailles pour convenir aux opérations de torréfaction de petite, moyenne et grande échelle." // Example translation
    },
    {
      question: "Quel type de support après-vente offrez-vous pour vos machines à torréfier ?",
      answer: "Nous fournissons un support après-vente complet, incluant la garantie, l'entretien et les services de réparation. Notre équipe est également disponible pour fournir une formation et un support afin d'assurer les performances optimales de votre machine." // Example translation
    },
    {
      question: "Quel est le délai de livraison pour une machine à torréfier ?",
      answer: "Le délai de livraison pour une machine à torréfier varie en fonction du modèle spécifique et des personnalisations demandées. En moyenne, le délai est de 4 à 8 semaines à compter de la date de commande." // Example translation
    }
  ]
};
---

<MainLayout title={pageTitle} lang="fr"> {/* Set language */}
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div>
      <p
        id="fadeText"
        class="mb-8 max-w-prose text-pretty font-light text-neutral-700 dark:text-neutral-300 sm:text-xl"
      >
        {@html product.data.main.content}
      </p>
    </div>
    <div
      class="flex flex-col items-center justify-between space-y-4 sm:flex-row sm:space-y-0"
    >
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {product.data.title}
        </h1>
        <p class="text-lg text-neutral-600 dark:text-neutral-400">
          {product.data.description}
        </p>
      </div>
      <div>
        <Image
          id="fadeInMoveRight"
          src={product.data.main.imgMain}
          class="w-[600px]"
          alt={product.data.main.imgAlt}
          format={"avif"}
          loading={"eager"}
        />
      </div>
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab, index) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
       {/* Description Tab Content */}
       <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="lg:w-3/4">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
              >
                {product.data.longDescription.title}
              </h2>
              <p
                class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400"
              >
                {@html product.data.longDescription.subTitle}
              </p>
              <p class="mt-5">
                <PrimaryCTA
                  title={product.data.longDescription.btnTitle}
                  url={product.data.longDescription.btnURL}
                />
              </p>
            </div>

            <div class="space-y-6 lg:space-y-10">
              {
                product.data.descriptionList.map((list) => (
                  <div class="flex">
                    {/* Optional: Add an icon here if needed */}
                    <div>
                      <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                        {list.title}
                      </h3>
                      <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                        {list.subTitle}
                      </p>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

       {/* Specifications Tab Content */}
       <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2">
            {/* Left Specifications */}
            <div class="max-w-md space-y-6">
              {
                product.data.specificationsLeft.map((spec) => (
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                      {spec.title}
                    </h3>
                    <p class="text-neutral-600 dark:text-neutral-400">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
               {/* Technical Layout Image (if exists) */}
              { product.data.specificationsLeft.find(spec => spec.title === "Technical Layout") && product.data.technicalLayoutImage &&
                <div class="mt-6">
                   <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">Disposition Technique</h3>
                   <p class="text-neutral-600 dark:text-neutral-400 mb-4">
                      Découvrez l'équilibre parfait entre durabilité et facilité d'utilisation, vous permettant de créer des expériences café extraordinaires avec confiance et précision.
                   </p>
                   <Image
                     src={product.data.technicalLayoutImage}
                     alt={`Disposition technique de ${product.data.title}`}
                     class="w-full rounded-lg border border-neutral-200 dark:border-neutral-700"
                     format={"webp"}
                     loading={"lazy"}
                   />
                </div>
              }
            </div>
            {/* Right Specifications OR Table */}
            {
              product.data.specificationsRight ? (
                <div class="mt-6 max-w-md space-y-6 md:ml-auto md:mt-0">
                  {product.data.specificationsRight?.map((spec) => (
                    <div>
                      <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                        {spec.title}
                      </h3>
                      <p class="text-neutral-600 dark:text-neutral-400">
                        {spec.subTitle}
                      </p>
                    </div>
                  ))}
                </div>
              ) : product.data.tableData ? (
                 <div class="mt-6 space-y-6 md:ml-auto md:mt-0">
                  <div class="flex flex-col">
                    <div class="-m-1.5 overflow-x-auto">
                      <div class="inline-block min-w-full p-1.5 align-middle">
                        <div class="overflow-hidden rounded-lg border dark:border-neutral-700">
                          <table class="min-w-full divide-y divide-neutral-200 dark:divide-neutral-700">
                            <thead class="bg-neutral-50 dark:bg-neutral-800">
                              <tr>
                                {product.data.tableData?.[0].feature?.map(
                                  (header) => (
                                    <th
                                      scope="col"
                                      class="px-6 py-3 text-start text-xs font-medium uppercase text-neutral-500 dark:text-neutral-400"
                                    >
                                      {header} {/* Assume headers are same in FR */}
                                    </th>
                                  )
                                )}
                              </tr>
                            </thead>
                           <tbody class="divide-y divide-neutral-200 dark:divide-neutral-700">
                              {product.data.tableData?.slice(1).map((row) =>
                                row.description.map((rowData, rowIndex) => (
                                  <tr key={rowIndex} class="hover:bg-neutral-100 dark:hover:bg-neutral-700">
                                    {rowData.map((cellValue, cellIndex) => (
                                      <td key={cellIndex} class="whitespace-nowrap px-6 py-4 text-sm font-medium text-neutral-800 dark:text-neutral-200">
                                        {cellValue} {/* Assume cell values are same in FR */}
                                      </td>
                                    ))}
                                  </tr>
                                ))
                              )}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null
            }
          </div>
        </div>
      </div>

       {/* Downloads (previously Blueprints) Tab Content - Now Empty */}
       <div id="tabs-with-card-3" class="hidden" role="tabpanel">
         {/* Contenu vide pour l'onglet Téléchargements */}
         <div class="mx-auto max-w-[85rem] px-4 py-10 text-center text-neutral-600 dark:text-neutral-400">
             {/* Optionnel: "Téléchargements bientôt disponibles." */}
         </div>
       </div>
    </div>
  </div>

  {/* <!-- ===== FAQ Section Start ===== --> */}
  {/* Using the English FAQ data for now, replace 'productFaqs' with translated data if available */}
  <FAQ title="Questions Fréquemment Posées" faqs={productFaqs} />
  {/* <!-- ===== FAQ Section End ===== --> */}

</MainLayout>

{/* Scripts remain the same as the English version */}
<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

 // GSAP Animations (Run on page load)
  document.addEventListener("DOMContentLoaded", () => {
      setElementAnimationDefaults("#fadeText", {
        autoAlpha: 0,
        y: 50,
        willChange: "transform, opacity",
      });

      setElementAnimationDefaults("#fadeInUp", {
        autoAlpha: 0,
        y: 50,
        willChange: "transform, opacity",
      });

      setElementAnimationDefaults("#fadeInMoveRight", {
        autoAlpha: 0,
        x: 300,
        willChange: "transform, opacity",
      });

      let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

      timeline.to("#fadeText", {
        duration: 1.5,
        autoAlpha: 1,
        y: 0,
        delay: 0.5, // Adjusted delay
        ease: "power2.out",
      });

      timeline.to(
        "#fadeInUp",
        { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
        "-=1.2"
      );

      timeline.to(
        "#fadeInMoveRight",
        { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
        "-=1.4"
      );

      // Fade out the overlay after animations start
      timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 }, 0); // Run concurrently with other animations
  });


 // Tab Switching Logic
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: HTMLElement, activeButton: HTMLElement) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-hs-tab"); // Use data-hs-tab now
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-orange-400", "dark:text-orange-300"]
        );
      }
    }

    function activateButton(button: HTMLElement) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        "hover:border-transparent", // Corrected comma placement
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-hs-tab"); // Use data-hs-tab now
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-orange-400", "dark:text-orange-300"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

     function changeHeadingStyle(
      button: HTMLElement,
      addClasses: string[],
      removeClasses: string[]
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

     // Corrected selector to match ProductTabBtn structure
    const tabButtons = document.querySelectorAll<HTMLElement>("[data-hs-tab]");

     // Activate the first tab by default
    if (tabButtons.length > 0) {
       // Find the initially active tab (marked with first={true} in the loop)
       const firstButton = Array.from(tabButtons).find(btn => btn.classList.contains('active'));
       if (firstButton) {
          activateButton(firstButton); // Ensure its content is visible
       } else {
          // Fallback: activate the first button if none is explicitly marked
          activateButton(tabButtons[0]);
           const firstContentId = tabButtons[0].getAttribute("data-hs-tab");
           if (firstContentId) {
             const firstContent = document.querySelector(firstContentId);
             if (firstContent) firstContent.classList.remove('hidden');
           }
       }

        // Ensure only the active button's content is visible initially
        tabButtons.forEach(btn => {
            if (!btn.classList.contains('active')) {
                const tabId = btn.getAttribute("data-hs-tab");
                if (tabId) {
                    const contentElement = document.querySelector(tabId);
                    if (contentElement) contentElement.classList.add('hidden');
                }
            }
        });
    }


    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
